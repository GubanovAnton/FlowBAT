{"version":3,"sources":["cleanup.coffee"],"names":[],"mappings":";AAAA;;AAAA,UAAU,GAAG,CAAC,OAAJ,CAAY,eAAZ,CAAV;;AAAA,KAEK,CAAC,mBAAN,GAA4B;AAC1B;AAAA,eAAiB,SAAS,UAAM,CAAC,OAAP,EAAJ,GAAuB,IAAI,KAAK,CAAC,GAAtC,CAAjB;SAEA,KAAK,CAAC,OAAO,CAAC,IAAd,CAAmB;AAAA,IAAC,SAAS,IAAV;AAAA,IAAgB,mBAAmB;AAAA,MAAC,MAAM,CAAP;KAAnC;AAAA,IAA8C,WAAW;AAAA,MAAC,KAAK,UAAN;KAAzD;GAAnB,CAA+F,CAAC,OAAhG,CAAwG,SAAC,KAAD;WACtG,KAAK,CAAC,OAAO,CAAC,MAAd,CAAqB,KAAK,CAAC,GAA3B,EADsG;EAAA,CAAxG,EAH0B;AAAA,CAF5B;;AAAA,KAQK,CAAC,yBAAN,GAAkC;AAChC;AAAA,eAAiB,SAAS,UAAM,CAAC,OAAP,EAAJ,GAAuB,IAAI,KAAK,CAAC,GAAtC,CAAjB;AAAA,EAEA,SAAS,KAAK,CAAC,OAAO,CAAC,OAAd,CAAsB,EAAtB,EAA0B;AAAA,IAAC,WAAW,KAAK,CAAC,eAAe,CAAC,MAAlC;GAA1B,CAFT;SAGA,KAAK,CAAC,OAAO,CAAC,IAAd,CAAmB;AAAA,IAAC,mBAAmB;AAAA,MAAC,MAAM,CAAP;KAApB;AAAA,IAA+B,WAAW;AAAA,MAAC,KAAK,UAAN;KAA1C;GAAnB,CAAgF,CAAC,OAAjF,CAAyF,SAAC,KAAD;AACvF;AAAA,gBAAY,WAAW,MAAM,CAAC,WAAlB,GAAgC,GAAhC,GAAsC,KAAK,CAAC,GAA5C,GAAkD,MAA9D;AACA,QAAG,MAAM,CAAC,KAAV;AACE,kBAAY,MAAM,CAAC,WAAP,CAAmB,SAAnB,CAAZ,CADF;KADA;WAGA,OAAO,CAAC,IAAR,CAAa,SAAb,EAAwB,MAAM,CAAC,eAAP,CAAuB,SAAC,GAAD,EAAM,MAAN,EAAc,MAAd;AAC7C;AAAA,eAAS,MAAM,CAAC,IAAP,EAAT;AAAA,MACA,QAAQ,MAAM,CAAC,IAAP,EADR;AAAA,MAEA,OAAU,GAAH,GAAY,GAAG,CAAC,IAAhB,GAA0B,CAFjC;AAGA,UAAG,KAAH;AACE,cAAU,UAAM,KAAN,CAAV,CADF;OAJ6C;IAAA,CAAvB,CAAxB,EAJuF;EAAA,CAAzF,EAJgC;AAAA,CARlC;;AAAA,KAwBK,CAAC,OAAO,CAAC,KAAK,CAAC,MAApB,CAA2B,SAAC,MAAD,EAAS,KAAT;AACzB;AAAA,WAAS,KAAK,CAAC,OAAO,CAAC,OAAd,CAAsB,EAAtB,EAA0B;AAAA,IAAC,WAAW,KAAK,CAAC,eAAe,CAAC,MAAlC;GAA1B,CAAT;AAAA,EACA,YAAY,WAAW,MAAM,CAAC,WAAlB,GAAgC,GAAhC,GAAsC,KAAK,CAAC,GAA5C,GAAkD,MAD9D;AAEA,MAAG,MAAM,CAAC,KAAV;AACE,gBAAY,MAAM,CAAC,WAAP,CAAmB,SAAnB,CAAZ,CADF;GAFA;SAIA,OAAO,CAAC,IAAR,CAAa,SAAb,EAAwB,MAAM,CAAC,eAAP,CAAuB,SAAC,GAAD,EAAM,MAAN,EAAc,MAAd;AAC7C;AAAA,aAAS,MAAM,CAAC,IAAP,EAAT;AAAA,IACA,QAAQ,MAAM,CAAC,IAAP,EADR;AAAA,IAEA,OAAU,GAAH,GAAY,GAAG,CAAC,IAAhB,GAA0B,CAFjC;AAGA,QAAG,KAAH;AACE,YAAU,UAAM,KAAN,CAAV,CADF;KAJ6C;EAAA,CAAvB,CAAxB,EALyB;AAAA,CAA3B,CAxBA","file":"/server/cleanup.coffee.js","sourcesContent":["Process = Npm.require(\"child_process\")\n\nshare.cleanupQuickQueries = ->\n  borderline = new Date(new Date().getTime() - 7 * share.day)\n#  borderline = new Date(new Date().getTime() - 1000)\n  share.Queries.find({isQuick: true, executingInterval: {$lte: 0}, updatedAt: {$lt: borderline}}).forEach (query) ->\n    share.Queries.remove(query._id)\n\nshare.cleanupCachedQueryResults = ->\n  borderline = new Date(new Date().getTime() - 2 * share.day)\n#  borderline = new Date(new Date().getTime() - 1000)\n  config = share.Configs.findOne({}, {transform: share.Transformations.config})\n  share.Queries.find({executingInterval: {$lte: 0}, updatedAt: {$lt: borderline}}).forEach (query) ->\n    rmCommand = \"rm -f \" + config.dataTempdir + \"/\" + query._id + \".rwf\"\n    if config.isSSH\n      rmCommand = config.wrapCommand(rmCommand)\n    Process.exec(rmCommand, Meteor.bindEnvironment((err, stdout, stderr) ->\n      result = stdout.trim()\n      error = stderr.trim()\n      code = if err then err.code else 0\n      if error\n        throw new Error(error)\n    ))\n\nshare.Queries.after.remove (userId, query) ->\n  config = share.Configs.findOne({}, {transform: share.Transformations.config})\n  rmCommand = \"rm -f \" + config.dataTempdir + \"/\" + query._id + \".rwf\"\n  if config.isSSH\n    rmCommand = config.wrapCommand(rmCommand)\n  Process.exec(rmCommand, Meteor.bindEnvironment((err, stdout, stderr) ->\n    result = stdout.trim()\n    error = stderr.trim()\n    code = if err then err.code else 0\n    if error\n      throw new Error(error)\n  ))\n"]}