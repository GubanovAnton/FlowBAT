{"version":3,"sources":["meteor://ðŸ’»app/server/security/configs.coffee"],"names":["share","Configs","allow","insert","securityRulesWrapper","userId","config","update","fieldNames","modifier","options","$set","Security","hasRole","Match","Error","isSSH","Optional","Boolean","host","String","port","user","identityFile","siteConfigFile","dataRootdir","dataTempdir","isNew","App","isNewUpdate","updatedAt","Date","isSetupComplete","_","extend","check","has","remove"],"mappings":";;;;;;;;;AAAAA,MAAMC,OAAN,CAAcC,KAAd,CACE;AAAAC,UAAQH,MAAMI,oBAAN,CAA2B,UAACC,MAAD,EAASC,MAAT;AACjC,iBADiC;AAA3B,IAAR;AAEAC,UAAQP,MAAMI,oBAAN,CAA2B,UAACC,MAAD,EAASC,MAAT,EAAiBE,UAAjB,EAA6BC,QAA7B,EAAuCC,OAAvC;AACjC,QAAAC,IAAA;;AAAA,SAAOX,MAAMY,QAAN,CAAeC,OAAf,CAAuBR,MAAvB,EAA+B,OAA/B,CAAP;AACE,YAAM,IAAIS,MAAMC,KAAV,CAAgB,sCAAhB,CAAN;AAGD;;AAFDJ,WACE;AAAAK,aAAOF,MAAMG,QAAN,CAAeC,OAAf,CAAP;AACAC,YAAML,MAAMG,QAAN,CAAeG,MAAf,CADN;AAEAC,YAAMP,MAAMG,QAAN,CAAeG,MAAf,CAFN;AAGAE,YAAMR,MAAMG,QAAN,CAAeG,MAAf,CAHN;AAIAG,oBAAcT,MAAMG,QAAN,CAAeG,MAAf,CAJd;AAKAI,sBAAgBV,MAAMG,QAAN,CAAeG,MAAf,CALhB;AAMAK,mBAAaX,MAAMG,QAAN,CAAeG,MAAf,CANb;AAOAM,mBAAaZ,MAAMG,QAAN,CAAeG,MAAf,CAPb;AAQAO,aAAOb,MAAMG,QAAN,CAAeH,MAAMc,GAAN,CAAUC,WAAV,CAAsBvB,OAAOqB,KAA7B,CAAf,CARP;AASAG,iBAAWC;AATX,KADF;;AAWA,QAAG,CAAIzB,OAAO0B,eAAd;AACEC,QAAEC,MAAF,CAASvB,IAAT,EACE;AAAAqB,yBAAiBlB,MAAMG,QAAN,CAAeC,OAAf;AAAjB,OADF;AAOD;;AAJDiB,UAAM1B,QAAN,EACE;AAAAE,YAAMA;AAAN,KADF;;AAGA,QAAGF,SAASE,IAAT,IAAkBsB,EAAEG,GAAF,CAAM3B,SAASE,IAAf,EAAqB,gBAArB,CAAlB,IAA6D,CAAIF,SAASE,IAAT,CAAca,cAAlF;AACE,YAAM,IAAIV,MAAMC,KAAV,CAAgB,yBAAhB,CAAN;AAMD;;AALD,QAAGN,SAASE,IAAT,IAAkBsB,EAAEG,GAAF,CAAM3B,SAASE,IAAf,EAAqB,aAArB,CAAlB,IAA0D,CAAIF,SAASE,IAAT,CAAcc,WAA/E;AACE,YAAM,IAAIX,MAAMC,KAAV,CAAgB,sBAAhB,CAAN;AAOD;;AAND,QAAGN,SAASE,IAAT,IAAkBsB,EAAEG,GAAF,CAAM3B,SAASE,IAAf,EAAqB,aAArB,CAAlB,IAA0D,CAAIF,SAASE,IAAT,CAAce,WAA/E;AACE,YAAM,IAAIZ,MAAMC,KAAV,CAAgB,sBAAhB,CAAN;AAQD;;AACD,WARA,IAQA;AAnCM,IAFR;AA8BAsB,UAAQrC,MAAMI,oBAAN,CAA2B,UAACC,MAAD,EAASC,MAAT;AAUjC,WATA,KASA,CAViC;AAA3B;AA9BR,CADF,0E","file":"/server/security/configs.coffee","sourcesContent":["share.Configs.allow\n  insert: share.securityRulesWrapper (userId, config) ->\n    false # There can be only one!\n  update: share.securityRulesWrapper (userId, config, fieldNames, modifier, options) ->\n    unless share.Security.hasRole(userId, \"admin\")\n      throw new Match.Error(\"Operation not allowed for non admins\")\n    $set =\n      isSSH: Match.Optional(Boolean)\n      host: Match.Optional(String)\n      port: Match.Optional(String)\n      user: Match.Optional(String)\n      identityFile: Match.Optional(String)\n      siteConfigFile: Match.Optional(String)\n      dataRootdir: Match.Optional(String)\n      dataTempdir: Match.Optional(String)\n      isNew: Match.Optional(Match.App.isNewUpdate(config.isNew))\n      updatedAt: Date\n    if not config.isSetupComplete\n      _.extend($set,\n        isSetupComplete: Match.Optional(Boolean)\n      )\n    check(modifier,\n      $set: $set\n    )\n    if modifier.$set and _.has(modifier.$set, \"siteConfigFile\") and not modifier.$set.siteConfigFile\n      throw new Match.Error(\"siteConfigFile required\")\n    if modifier.$set and _.has(modifier.$set, \"dataRootdir\") and not modifier.$set.dataRootdir\n      throw new Match.Error(\"dataRootdir required\")\n    if modifier.$set and _.has(modifier.$set, \"dataTempdir\") and not modifier.$set.dataTempdir\n      throw new Match.Error(\"dataTempdir required\")\n    true\n  remove: share.securityRulesWrapper (userId, config) ->\n    false # Who wants to live forever?\n"]}