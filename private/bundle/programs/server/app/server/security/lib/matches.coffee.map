{"version":3,"sources":["meteor://ðŸ’»app/server/security/lib/matches.coffee"],"names":["indexOf","Match","App","Id","Where","value","check","String","call","share","fixtureIds","length","_","difference","split","Error","UserId","Meteor","users","findOne","QueryId","Queries","IPSetId","IPSets","TupleId","Tuples","isNewUpdate","oldValue","Boolean","InArray","possibleValues","join","UnsignedNumber","Number","Email","match","emailRegex","extend","ExternalSource"],"mappings":"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","file":"/server/security/lib/matches.coffee","sourcesContent":["Match.App =\n  Id: Match.Where (value) ->\n    check(value, String)\n    if value in share.fixtureIds\n      return true # verbose IDs\n    if value.length isnt 17 or _.difference(value.split(\"\"), [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"J\", \"K\", \"L\", \"M\", \"N\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"W\", \"X\", \"Y\", \"Z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]).length\n      throw new Match.Error(\"Value \\\"\" + value + \"\\\" is not a valid ID\")\n    true\n  UserId: Match.Where (value) ->\n    check(value, Match.App.Id)\n    unless Meteor.users.findOne(value)\n      throw new Match.Error(\"User with ID \\\"\" + value + \"\\\" doesn't exist\")\n    true\n  QueryId: Match.Where (value) ->\n    check(value, Match.App.Id)\n    unless share.Queries.findOne(value)\n      throw new Match.Error(\"Query with ID \\\"\" + value + \"\\\" doesn't exist\")\n    true\n  IPSetId: Match.Where (value) ->\n    check(value, Match.App.Id)\n    unless share.IPSets.findOne(value)\n      throw new Match.Error(\"IP Set with ID \\\"\" + value + \"\\\" doesn't exist\")\n    true\n  TupleId: Match.Where (value) ->\n    check(value, Match.App.Id)\n    unless share.Tuples.findOne(value)\n      throw new Match.Error(\"Tuple file with ID \\\"\" + value + \"\\\" doesn't exist\")\n    true\n  isNewUpdate: (oldValue) ->\n    Match.Where (value) ->\n      check(value, Boolean)\n      if value and not oldValue\n        throw new Match.Error(\"isNew update can't be true from false\")\n      true\n  InArray: (possibleValues) ->\n    Match.Where (value) ->\n      if possibleValues.indexOf(value) == -1\n        throw new Match.Error(\"Expected one of \\\"\"+possibleValues.join(\"\\\", \\\"\")+\"\\\"; got \\\"\" + value + \"\\\"\")\n      true\n  UnsignedNumber: Match.Where (value) ->\n    check(value, Number)\n    if value < 0\n      throw new Match.Error(\"Must be unsigned number\")\n    true\n  Email: Match.Where (value) ->\n    value.match(share.emailRegex)\n_.extend(Match.App,\n  ExternalSource: Match.App.InArray([\"trello\"])\n)\n"]}