{"version":3,"sources":["periodic.execution.coffee"],"names":[],"mappings":";AAAA,KAAK,CAAC,iBAAN,GACE;AAAA,WAAS,IAAT;AAAA,EACA,oBAAoB,IADpB;AAAA,EAEA,SAAS;AACP,SAAK,CAAC,OAAO,CAAC,IAAd,CAAmB;AAAA,MAAC,aAAa;AAAA,QAAC,MAAU,UAAX;OAAd;KAAnB,CAAqD,CAAC,OAAtD,CAA8D,SAAC,KAAD;AAE5D;AAAA,oBAAkB,SAAS,UAAM,CAAC,OAAP,EAAJ,GAAuB,KAAK,CAAC,iBAAlC,CAAlB;aACA,KAAK,CAAC,OAAO,CAAC,MAAd,CAAqB,KAAK,CAAC,GAA3B,EAAgC;AAAA,QAAC,MAAM;AAAA,UAAC,cAAc,IAAf;AAAA,UAAqB,eAAe,IAApC;AAAA,UAA0C,aAAa,WAAvD;SAAP;OAAhC,EAA6G;AAAA,QAAC,kBAAkB,IAAnB;OAA7G,EAH4D;IAAA,CAA9D;WAIA,IAAC,aAAD,GALO;EAAA,CAFT;AAAA,EAQA,cAAc;AACZ;AAAA,mBAAe,KAAK,CAAC,OAAO,CAAC,OAAd,CAAsB;AAAA,MAAC,aAAa;AAAA,QAAC,KAAK,IAAN;OAAd;KAAtB,EAAkD;AAAA,MAAC,MAAM;AAAA,QAAC,aAAa,CAAd;OAAP;KAAlD,CAAf;AAAA,IACA,UAAU,KAAK,IADf;AAEA,QAAG,YAAH;AACE,gBAAU,YAAY,CAAC,WAAW,CAAC,OAAzB,KAAyC,UAAM,CAAC,OAAP,EAAnD,CADF;KAFA;AAIA,QAAG,IAAC,QAAJ;AACE,YAAM,CAAC,YAAP,CAAoB,IAAC,QAArB,EADF;KAJA;AAAA,IAMA,UAAU,IAAI,CAAC,GAAL,CAAS,IAAT,EAAe,OAAf,CANV;WAQA,IAAC,QAAD,GAAW,MAAM,CAAC,UAAP,CAAkB,IAAC,QAAnB,EAA4B,OAA5B,EATC;EAAA,CARd;CADF;;AAAA,CAoBC,CAAC,OAAF,CAAU,KAAK,CAAC,iBAAhB,EAAmC,SAAnC,EAA8C,cAA9C,CApBA","file":"/server/periodic.execution.coffee.js","sourcesContent":["share.periodicExecution =\n  timeout: null\n  nearestExecutingAt: null\n  execute: ->\n    share.Queries.find({executingAt: {$lte: new Date()}}).forEach (query) ->\n#      cl \"executing\" + query.name + \" at \" + new Date() + \" requested at \" + query.executingAt\n      executingAt = new Date(new Date().getTime() + query.executingInterval)\n      share.Queries.update(query._id, {$set: {isInputStale: true, isOutputStale: true, executingAt: executingAt}}, {skipResetTimeout: true})\n    @resetTimeout()\n  resetTimeout: ->\n    nearestQuery = share.Queries.findOne({executingAt: {$ne: null}}, {sort: {executingAt: 1}})\n    timeout = 30 * 1000\n    if nearestQuery\n      timeout = nearestQuery.executingAt.getTime() - new Date().getTime()\n    if @timeout\n      Meteor.clearTimeout(@timeout)\n    timeout = Math.max(1000, timeout) # at least a second in future; protection from state with executingAt in the past\n#    cl \"resetTimeout to \" + timeout\n    @timeout = Meteor.setTimeout(@execute, timeout)\n\n_.bindAll(share.periodicExecution, \"execute\", \"resetTimeout\")\n"]}