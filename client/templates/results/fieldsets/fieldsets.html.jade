template(name="fieldsets")
  fieldset
    legend
      span(class="fieldset-toggle", data-fieldset="time")
        i.fa.fa-fw(class="{{#if condition 'time' 'in' expandedFieldsets}}fa-caret-down{{else}}fa-caret-right{{/if}}")
        | Time Range
    if condition "time" "in" expandedFieldsets
      if condition startDateType "is" "interval"
        .row
          .col-xs-6
            .form-group
              label.control-label
                | Start date (<a href="#" class="set-property dashed" data-property="startDateType" data-value="offset">switch to rolling</a>)
                i.fa.fa-question-circle.text-muted(data-toggle="popover", title="Start date", data-content="Used to view flow records ranging from a specific start date. Takes the form of YYYY/MM/DD[:HH], where the hour is optional. If specified with an end date, it this will return data for that range. If specified by itself, it will only return data for the start date selected. If no start date is specified, records for the current day will be returned.")
              .input-group
                span.input-group-addon
                  +checkbox(family="query" _id=_id property="startDateEnabled" value=startDateEnabled isNew=isNew)
                +date(family="query" _id=_id property="startDate" value=startDate enabled=startDateEnabled placeholder="yyyy/mm/dd" isNew=isNew)
                span.input-group-addon
                  i.fa.fa-calendar.open-calendar
          .col-xs-6
            .form-group
              label.control-label
                | End date
                i.fa.fa-question-circle.text-muted(data-toggle="popover", title="End Date", data-content="Used in conjunction with Start Date to filter based on data returned for a specific time range. Takes the form of YYYY/MM/DD[:HH], where the hour is optional.")
              .input-group
                span.input-group-addon
                  +checkbox(family="query" _id=_id property="endDateEnabled" value=endDateEnabled isNew=isNew)
                +date(family="query" _id=_id property="endDate" value=endDate enabled=endDateEnabled placeholder="yyyy/mm/dd" isNew=isNew)
                span.input-group-addon
                  i.fa.fa-calendar.open-calendar
        .row
          .col-xs-6
            .form-group
              label.control-label
                | Active time
                i.fa.fa-question-circle.text-muted(data-toggle="popover", title="Active time", data-content="Used to view flow records within a specific time range. Takes the form of YYYY/MM/DD[:HH[:MM[:SS[.ssssss]]]]-YYYY/MM/DD[:HH[:MM[:SS[.ssssss]]]]. Both a start and ending time period must be specified.")
              .input-group
                span.input-group-addon
                  +checkbox(family="query" _id=_id property="activeTimeEnabled" value=activeTimeEnabled isNew=isNew)
                +input(family="query" _id=_id property="activeTime" value=activeTime enabled=activeTimeEnabled isNew=isNew)
      if condition startDateType "is" "offset"
        .row
          .col-xs-6
            .form-group
              label.control-label
                | Start date rolling offset from moment of query execution (<a href="#" class="set-property dashed" data-property="startDateType" data-value="interval">switch to interval</a>)
                i.fa.fa-question-circle.text-muted(data-toggle="popover", title="Start date rolling offset", data-content='The Rolling Offset mechanism alters the start and end time upon successive query execution such that the time period of interest is the previous X-minutes from the time of execution. This feature is ideal for generating dashboards for static time intervals where you only care to know what is happening "in the past x-minutes."')
              .input-group
                span.input-group-addon
                  +checkbox(family="query" _id=_id property="startDateOffsetEnabled" value=startDateOffsetEnabled isNew=isNew)
                +input(family="query" _id=_id property="startDateOffset" value=startDateOffset enabled=startDateOffsetEnabled isNew=isNew)
                span.input-group-addon minutes
          .col-xs-6
            .form-group
              label.control-label
                | Predefined offsets
              .input-group
                .input-group-btn
                  .btn-group
                    each startDateOffsets
                      button.set-property.btn.btn-default(class="{{#if condition ../startDateOffset 'is' value}}active{{/if}}", data-property="startDateOffset", data-value=value, type="button")
                        | {{name}}
  fieldset
    legend
      span(class="fieldset-toggle", data-fieldset="host")
        i.fa.fa-fw(class="{{#if condition 'host' 'in' expandedFieldsets}}fa-caret-down{{else}}fa-caret-right{{/if}}")
        | Host
    if condition "host" "in" expandedFieldsets
      .row
        .col-xs-6
          .form-group
            label.control-label
              | Source IP
              i.fa.fa-question-circle.text-muted(data-toggle="popover", title="Source IP", data-content='Used to view flow records matching a specific source IP address. Can be expressed in the form of a single IP address like "192.168.1.25", or a range of IP addresses in CIDR notation, such as "192.168.1.0/24".')
            .input-group
              span.input-group-addon
                +checkbox(family="query" _id=_id property="saddressEnabled" value=saddressEnabled isNew=isNew)
              +input(family="query" _id=_id property="saddress" value=saddress enabled=saddressEnabled isNew=isNew)
        .col-xs-6
          .form-group
            label.control-label
              | Source IP Set
              i.fa.fa-question-circle.text-muted(data-toggle="popover", title="Source IP Set", data-content='Used to view flow records matching a group of source IP addresses specified in a saved IP Set. IP Sets can be created from the “IP Sets” page and used to reference commonly filtered hosts. This is often used for referencing local device ranges or specific groupings of devices based on their function, such as HTTP servers.')
            .input-group
              span.input-group-addon
                +checkbox(family="query" _id=_id property="sipSetEnabled" value=sipSetEnabled isNew=isNew)
              +chosen(family="query" _id=_id property="sipSet" value=sipSet options=ipsets enabled=sipSetEnabled withEmptyOption=true isNew=isNew)
              span.input-group-btn
                a.btn.btn-default(href="/ipset/{{sipSet}}", disabled="{{not sipSet}}")
                  i.fa.fa-pencil
                a.btn.btn-default(href="/ipset/create")
                  i.fa.fa-plus
      .row
        .col-xs-6
          .form-group
            label.control-label
              | Destination IP
              i.fa.fa-question-circle.text-muted(data-toggle="popover", title="Destination IP", data-content='Used to view flow records matching a specific destination IP address. Can be expressed in the form of a single IP address like "192.168.1.25", or a range of IP addresses in CIDR notation, such as "192.168.1.0/24".')
            .input-group
              span.input-group-addon
                +checkbox(family="query" _id=_id property="daddressEnabled" value=daddressEnabled isNew=isNew)
              +input(family="query" _id=_id property="daddress" value=daddress enabled=daddressEnabled isNew=isNew)
        .col-xs-6
          .form-group
            label.control-label
              | Destination IP Set
              i.fa.fa-question-circle.text-muted(data-toggle="popover", title="Destination IP Set", data-content='Used to view flow records matching a group of destination IP addresses specified in a saved IP Set. IP Sets can be created from the “IP Sets” page and used to reference commonly filtered hosts. This is often used for referencing local device ranges or specific groupings of devices based on their function, such as HTTP servers.')
            .input-group
              span.input-group-addon
                +checkbox(family="query" _id=_id property="dipSetEnabled" value=dipSetEnabled isNew=isNew)
              +chosen(family="query" _id=_id property="dipSet" value=dipSet options=ipsets enabled=dipSetEnabled withEmptyOption=true isNew=isNew)
              span.input-group-btn
                a.btn.btn-default(href="/ipset/{{dipSet}}", disabled="{{not dipSet}}")
                  i.fa.fa-pencil
                a.btn.btn-default(href="/ipset/create")
                  i.fa.fa-plus
      .row
        .col-xs-6
          .form-group
            label.control-label
              | Any IP
              i.fa.fa-question-circle.text-muted(data-toggle="popover", title="Any IP", data-content='Used to view flow records matching a specific source or destination IP address. Can be expressed in the form of a single IP address like “192.168.1.25", or a range of IP addresses in CIDR notation, such as "192.168.1.0/24".')
            .input-group
              span.input-group-addon
                +checkbox(family="query" _id=_id property="anyAddressEnabled" value=anyAddressEnabled isNew=isNew)
              +input(family="query" _id=_id property="anyAddress" value=anyAddress enabled=anyAddressEnabled isNew=isNew)
        .col-xs-6
          .form-group
            label.control-label
              | Any IP Set
              i.fa.fa-question-circle.text-muted(data-toggle="popover", title="Any IP Set", data-content='Used to view flow records matching a group of source or destination IP addresses specified in a saved IP Set. IP Sets can be created from the “IP Sets” page and used to reference commonly filtered hosts. This is often used for referencing local device ranges or specific groupings of devices based on their function, such as HTTP servers.')
            .input-group
              span.input-group-addon
                +checkbox(family="query" _id=_id property="anySetEnabled" value=anySetEnabled isNew=isNew)
              +chosen(family="query" _id=_id property="anySet" value=anySet options=ipsets enabled=anySetEnabled withEmptyOption=true isNew=isNew)
              span.input-group-btn
                a.btn.btn-default(href="/ipset/{{anySet}}", disabled="{{not anySet}}")
                  i.fa.fa-pencil
                a.btn.btn-default(href="/ipset/create")
                  i.fa.fa-plus
  fieldset
    legend
      span(class="fieldset-toggle", data-fieldset="port")
        i.fa.fa-fw(class="{{#if condition 'port' 'in' expandedFieldsets}}fa-caret-down{{else}}fa-caret-right{{/if}}")
        | Port and protocol
    if condition "port" "in" expandedFieldsets
      .row
        .col-xs-6
          .form-group
            label.control-label
              | Source port
              i.fa.fa-question-circle.text-muted(data-toggle="popover", title="Source port", data-content='Used to view flow records matching a source port or group of source ports. Can be expressed as a single port like “80”, or a range of ports like “6300-6309”.')
            .input-group
              span.input-group-addon
                +checkbox(family="query" _id=_id property="sportEnabled" value=sportEnabled isNew=isNew)
              +input(family="query" _id=_id property="sport" value=sport enabled=sportEnabled isNew=isNew)
        .col-xs-6
          .form-group
            label.control-label
              | Flags
              i.fa.fa-question-circle.text-muted(data-toggle="popover", title="Flags", data-content='Used to view flow records for TCP traffic that contains specified TCP flag values such as SYN, ACK, PSH, etc.')
            .input-group
              span.input-group-addon
                +checkbox(family="query" _id=_id property="flagsAllEnabled" value=flagsAllEnabled isNew=isNew)
              +input(family="query" _id=_id property="flagsAll" value=flagsAll enabled=flagsAllEnabled isNew=isNew)
      .row
        .col-xs-6
          .form-group
            label.control-label
              | Destination port
              i.fa.fa-question-circle.text-muted(data-toggle="popover", title="Destination port", data-content='Used to view flow records matching a destination port or group of destination ports. Can be expressed as a single port like “80”, or a range of ports like “6300-6309”.')
            .input-group
              span.input-group-addon
                +checkbox(family="query" _id=_id property="dportEnabled" value=dportEnabled isNew=isNew)
              +input(family="query" _id=_id property="dport" value=dport enabled=dportEnabled isNew=isNew)
        .col-xs-6
          .form-group
            label.control-label
              | Protocol
              i.fa.fa-question-circle.text-muted(data-toggle="popover", title="Protocol", data-content='Used to view flow records associated with specific Layer 4 protocols. These values are specified by the protocol’s decimal identification code. For example, TCP is identified by “6” and UDP is identified by “17”. If this field is left blank, all protocols are selected by default.')
            .input-group
              span.input-group-addon
                +checkbox(family="query" _id=_id property="protocolEnabled" value=protocolEnabled isNew=isNew)
              +input(family="query" _id=_id property="protocol" value=protocol enabled=protocolEnabled isNew=isNew)
      .row
        .col-xs-6
          .form-group
            label.control-label
              | Any port
              i.fa.fa-question-circle.text-muted(data-toggle="popover", title="Any port", data-content='Used to view flow records matching a source or destination port or group of source or destination ports. Can be expressed as a single port like “80”, or a range of ports like “6300-6309”.')
            .input-group
              span.input-group-addon
                +checkbox(family="query" _id=_id property="aportEnabled" value=aportEnabled isNew=isNew)
              +input(family="query" _id=_id property="aport" value=aport enabled=aportEnabled isNew=isNew)
  fieldset
    legend
      span(class="fieldset-toggle", data-fieldset="additional")
        i.fa.fa-fw(class="{{#if condition 'additional' 'in' expandedFieldsets}}fa-caret-down{{else}}fa-caret-right{{/if}}")
        | Additional options
    if condition "additional" "in" expandedFieldsets
      .row
        .col-xs-6
          .form-group
            label.control-label
              | Types
              i.fa.fa-question-circle.text-muted(data-toggle="popover", title="Types", data-content='Used to view flow records based on how they are categorized by SiLK. This traffic can fall into multiple buckets, but the most commonly used types include “in” (inbound traffic), "inweb" (inbound web traffic), "out" (outbound traffic), "outweb" (outbound web traffic). Internal and external network segments are defined in your SiLK silk.conf configuration file. If this field is left blank, all types are selected by default.')
            .input-group
              span.input-group-addon
                +checkbox(family="query" _id=_id property="typesEnabled" value=typesEnabled isNew=isNew)
              +chosen(family="query" _id=_id property="types" value=types options=typesOptions multiple=true enabled=typesEnabled isNew=isNew)
        .col-xs-6
          .form-group
            label.control-label
              | Sensor
              i.fa.fa-question-circle.text-muted(data-toggle="popover", title="Sensor", data-content='Used to view flow records associated with a specific sensor or group of sensors. Sensors are configured in your SiLK sensors.conf configuration file. If this field is left blank, all sensors are selected by default.')
            .input-group
              span.input-group-addon
                +checkbox(family="query" _id=_id property="sensorEnabled" value=sensorEnabled isNew=isNew)
              +input(family="query" _id=_id property="sensor" value=sensor enabled=sensorEnabled isNew=isNew)
      .row
        .col-xs-6
          .form-group
            label.control-label
              | Source country
              i.fa.fa-question-circle.text-muted(data-toggle="popover", title="Source country", data-content='Used to view flow records from a specific source country. Counties are identified by their official country code. For instance, the United States would be identified by “us”.')
            .input-group
              span.input-group-addon
                +checkbox(family="query" _id=_id property="sccEnabled" value=sccEnabled isNew=isNew)
              +chosen(family="query" _id=_id property="scc" value=scc options=countriesOptions multiple=true enabled=sccEnabled isNew=isNew)
        .col-xs-6
          .form-group
            label.control-label
              | Additional parameters
              i.fa.fa-question-circle.text-muted(data-toggle="popover", title="Additional parameters", data-content='Used to specify additional SiLK rwfilter command line options not made available through the FlowBAT interface. This should be used by advanced users only.')
            .input-group.additional-parameters-form-group
              span.input-group-addon
                +checkbox(family="query" _id=_id property="additionalParametersEnabled" value=additionalParametersEnabled isNew=isNew)
              +input(family="query" _id=_id property="additionalParameters" value=additionalParameters enabled=additionalParametersEnabled placeholder="Raw command-line options" isNew=isNew)
      .row
        .col-xs-6
          .form-group
            label.control-label
              | Destination country
              i.fa.fa-question-circle.text-muted(data-toggle="popover", title="Destination country", data-content='Used to view flow records to a specific destination country. Counties are identified by their official country code. For instance, the United States would be identified by “us”.')
            .input-group
              span.input-group-addon
                +checkbox(family="query" _id=_id property="dccEnabled" value=dccEnabled isNew=isNew)
              +chosen(family="query" _id=_id property="dcc" value=dcc options=countriesOptions multiple=true enabled=dccEnabled isNew=isNew)
      .row
        .col-xs-12
          .form-group
            label.control-label
              | Exclusions
            .input-group.additional-parameters-form-group
              span.input-group-addon
                +checkbox(family="query" _id=_id property="additionalExclusionsCmdEnabled" value=additionalExclusionsCmdEnabled isNew=isNew)
              +input(family="query" _id=_id property="additionalExclusionsCmd" value=additionalExclusionsCmd enabled=additionalExclusionsCmdEnabled placeholder="Use \"OR\" to separate exclusions, for example: --type=7 OR --dport=80" isNew=isNew)
  fieldset
    legend Output type
      i.fa.fa-question-circle.text-muted(data-toggle="popover", title="Output Type", data-content='Records - The default output type. Selecting Records allows you to examine each flow record individually. Fields can be altered with checkboxes below the table, columns can be sorted by clicking the column name, and columns can be resorted by click-dragging the column name. Selecting "Stats" allows you to generate statistics based on field and value delimters. For instance, "Top 10 applications by bytes" would have "top" selectied, "count=10", the field "application" and the value "bytes". The "Count" output type lets you view how much data has occurred in specific time intervals known as "bins". The "bin time" defaults to 60 seconds but can be changed. Graphs can be easily generated by selecting "chart" and choosing the desired chart type. The chart is a direct graphical representation of the table mode.')
    .row
      .col-xs-6
        +outputField
  if condition output "is" "rwstats"
    fieldset.rwstats-parameters
      legend Stats parameters
        i.fa.fa-question-circle.text-muted(data-toggle="popover", title="rwstats fields", data-content="These parameters determine how the statistics are to be calculated by selecting Top-N or Bottom-N, and a value to limit the amount of output. Count sets a static limit (top 20 for instance), threshold outputs all results over/under a specific stats VALUE, and percentage prints the bins where the primary value is greater-than (or less-than) N percent of the sum of the primary values across all bins.")
      .row
        .col-xs-2
          .input-group.direction-input-group
            .input-group-btn
              .btn-group
                button.set-property.btn.btn-default(class="{{#if condition rwstatsDirection 'is' 'top'}}active{{/if}} {{#if ../isDashboard}}btn-xs{{/if}}", data-property="rwstatsDirection", data-value="top", type="button")
                  i.fa.fa-hand-o-up
                  | Top
                button.set-property.btn.btn-default(class="{{#if condition rwstatsDirection 'is' 'bottom'}}active{{/if}} {{#if ../isDashboard}}btn-xs{{/if}}", data-property="rwstatsDirection", data-value="bottom", type="button")
                  i.fa.fa-hand-o-down
                  | Bottom
        .col-xs-2
          .form-group
            .input-group
              span.input-group-addon.equisize-input-group-addon
                label
                  +radio(family="query" _id=_id object=. property="rwstatsMode" value="count" isNew=isNew)
                  | Count
              +input(family="query" _id=_id property="rwstatsCountModeValue" value=rwstatsCountModeValue enabled=rwstatsCountModeValueIsEnabled isNew=isNew)
        .col-xs-2
          .form-group
            .input-group
              span.input-group-addon.equisize-input-group-addon
                label
                  +radio(family="query" _id=_id object=. property="rwstatsMode" value="threshold" isNew=isNew)
                  | Threshold
              +input(family="query" _id=_id property="rwstatsThresholdModeValue" value=rwstatsThresholdModeValue enabled=rwstatsThresholdModeValueIsEnabled isNew=isNew)
        .col-xs-2
          .form-group
            .input-group
              span.input-group-addon.equisize-input-group-addon
                label
                  +radio(family="query" _id=_id object=. property="rwstatsMode" value="percentage" isNew=isNew)
                  | Percentage
              +input(family="query" _id=_id property="rwstatsPercentageModeValue" value=rwstatsPercentageModeValue enabled=rwstatsPercentageModeValueIsEnabled isNew=isNew)
        .col-xs-2.col-xs-offset-2.equisize-input-group-addon
          .input-group
            span.input-group-addon
              label
                +checkbox(family="query" _id=_id property="rwstatsBinTimeEnabled" value=rwstatsBinTimeEnabled isNew=isNew)
                | Bin time
            +input(family="query" _id=_id property="rwstatsBinTime" value=rwstatsBinTime placeholder="60" enabled=rwstatsBinTimeEnabled isNew=isNew)
    fieldset.display-fields-block
      legend Stats fields
        i.fa.fa-question-circle.text-muted(data-toggle="popover", title="rwstats fields", data-content="To compute a Top-N or Bottom-N list, the key field(s) must be specified. These are the flow attributes (a.k.a. fields or columns) that make up the key into which flows are binned and statistics are computed from. Bin-time is unique for when time FIELDS are used, to determine the time bin top/bottom-n statistics.")
      .row
        .col-xs-12
          each rwstatsFieldsOrder
            .checkbox
              label
                input.field-checkbox(type="checkbox", checked="{{fieldIsSelected .. 'rwstatsFields'}}", value="{{.}}", data-property="rwstatsFields")
                | {{t fieldI18nString}}
    fieldset.display-fields-block
      legend Stats values
        i.fa.fa-question-circle.text-muted(data-toggle="popover", title="rwstats values", data-content='These options determine how the statistics are calculated (such as if you are looking for top 10 dip by BYTES for example). When computing a Top-N or Bottom-N, all flows that have the same key field(s) will be binned together. For each bin, one or more aggregate values are computed as specified by VALUES, a comma separated list of names. VALUES that are not Records, Packets, or Bytes are instead "distinct" grouping values (such as how many "distinct-dcc" did a user talk to).')
      .row
        .col-xs-12
          each rwstatsValuesOrder
            .checkbox
              label
                input.field-checkbox(type="checkbox", checked="{{fieldIsSelected .. 'rwstatsValues'}}", value="{{.}}", data-property="rwstatsValues")
                if condition . "in" share.rwstatsValues
                  strong {{t fieldI18nString}}
                else
                  | {{t fieldI18nString}}
      .row
        .col-xs-4
          .form-group
            +chosen(family="query" _id=_id property="rwstatsPrimaryValue" value=rwstatsPrimaryValue options=rwstatsPrimaryValueOptions placeholder="Primary stats value" withEmptyOption=true isNew=isNew)
  if condition output "is" "rwcount"
    fieldset.rwcount-parameters
      legend Count parameters
      .row
        .col-xs-5
          .form-group
            label.control-label Bin size
              i.fa.fa-question-circle.text-muted(data-toggle="popover", title="bin size", data-content='Denote the size of each time bin, in seconds; defaults to 30 seconds.')
            .input-group
              span.input-group-addon
                +checkbox(family="query" _id=_id property="rwcountBinSizeEnabled" value=rwcountBinSizeEnabled isNew=isNew)
              +input(family="query" _id=_id property="rwcountBinSize" value=rwcountBinSize enabled=rwcountBinSizeEnabled isNew=isNew)
              span.input-group-addon seconds
        .col-xs-5
          .form-group
            label.control-label Load scheme
              i.fa.fa-question-circle.text-muted(data-toggle="popover", title="load scheme", data-content='Specify how a flow record that spans multiple bins allocates its bytes and packets among the bins. The default scheme is time-proportional.')
            .input-group
              span.input-group-addon
                +checkbox(family="query" _id=_id property="rwcountLoadSchemeEnabled" value=rwcountLoadSchemeEnabled isNew=isNew)
              +chosen(family="query" _id=_id property="rwcountLoadScheme" value=rwcountLoadScheme options=rwcountLoadSchemeOptions enabled=rwcountLoadSchemeEnabled isNew=isNew)
        .col-xs-2
          .form-group
            label.control-label Skip zeroes
            i.fa.fa-question-circle.text-muted(data-toggle="popover", title="skip zeroes", data-content='Disable printing of bins with no traffic. By default, all bins are printed.')
            .input-group.fake-input-group
              span.input-group-addon
                +checkbox(family="query" _id=_id property="rwcountSkipZeroes" value=rwcountSkipZeroes isNew=isNew)
              .fake-input
  if availableChartTypes.length
    +presentationFieldset
  fieldset
    legend Final query
    .row
      .col-xs-12
        if inputCommand
          code.query-display
            | $ {{inputCommand}}
          code.query-display
            | $ {{outputCommand null currentUser.profile}}
        else
          code.query-display
            em Please set some options to build the query
